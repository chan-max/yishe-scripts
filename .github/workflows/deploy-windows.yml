name: 部署到Windows服务器

on:
  push:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 创建部署包
      run: |
        # 创建部署目录
        mkdir -p deploy-package
        
        # 复制需要的文件，排除不需要的文件
        rsync -av --exclude='node_modules' \
                  --exclude='.git' \
                  --exclude='.github' \
                  --exclude='screenshots' \
                  --exclude='temp' \
                  --exclude='db_backups' \
                  --exclude='*.log' \
                  --exclude='.DS_Store' \
                  ./ deploy-package/
                  
        # 创建部署信息文件
        echo "部署时间: $(date)" > deploy-package/deploy-info.txt
        echo "提交哈希: ${{ github.sha }}" >> deploy-package/deploy-info.txt
        echo "分支: ${{ github.ref_name }}" >> deploy-package/deploy-info.txt
        echo "提交者: ${{ github.actor }}" >> deploy-package/deploy-info.txt
        
    - name: 压缩部署包
      run: tar -czf deploy-package.tar.gz deploy-package/
        
    - name: 上传部署包
      uses: actions/upload-artifact@v4
      with:
        name: deploy-package
        path: deploy-package.tar.gz
        retention-days: 7
        
    - name: 传输部署包到Windows服务器
      run: |
        if [ -z "${{ secrets.WINDOWS_SERVER_HOST }}" ]; then
          echo "错误: WINDOWS_SERVER_HOST 未设置"
          exit 1
        fi
        if [ -z "${{ secrets.WINDOWS_SERVER_USER }}" ]; then
          echo "错误: WINDOWS_SERVER_USER 未设置"
          exit 1
        fi
        if [ -z "${{ secrets.WINDOWS_SERVER_PASSWORD }}" ]; then
          echo "错误: WINDOWS_SERVER_PASSWORD 未设置"
          exit 1
        fi
        SERVER_HOST="${{ secrets.WINDOWS_SERVER_HOST }}"
        SERVER_USER="${{ secrets.WINDOWS_SERVER_USER }}"
        SERVER_PASSWORD="${{ secrets.WINDOWS_SERVER_PASSWORD }}"
        SERVER_PORT="${{ secrets.WINDOWS_SERVER_PORT || '22' }}"
        DEPLOY_PATH="${{ secrets.WINDOWS_SERVER_PATH }}"
        echo "$SERVER_PASSWORD" | sshpass -p "$SERVER_PASSWORD" \
        scp -P $SERVER_PORT -o StrictHostKeyChecking=no deploy-package.tar.gz $SERVER_USER@$SERVER_HOST:$DEPLOY_PATH/

    - name: 部署到Windows服务器
      run: |
        if [ -z "${{ secrets.WINDOWS_SERVER_HOST }}" ]; then
          echo "错误: WINDOWS_SERVER_HOST 未设置"
          exit 1
        fi
        if [ -z "${{ secrets.WINDOWS_SERVER_USER }}" ]; then
          echo "错误: WINDOWS_SERVER_USER 未设置"
          exit 1
        fi
        if [ -z "${{ secrets.WINDOWS_SERVER_PASSWORD }}" ]; then
          echo "错误: WINDOWS_SERVER_PASSWORD 未设置"
          exit 1
        fi
        SERVER_HOST="${{ secrets.WINDOWS_SERVER_HOST }}"
        SERVER_USER="${{ secrets.WINDOWS_SERVER_USER }}"
        SERVER_PASSWORD="${{ secrets.WINDOWS_SERVER_PASSWORD }}"
        SERVER_PORT="${{ secrets.WINDOWS_SERVER_PORT || '22' }}"
        DEPLOY_PATH="${{ secrets.WINDOWS_SERVER_PATH }}"
        # 创建部署脚本
        cat > deploy-script.ps1 << 'POWERSHELL_EOF'
        param(
            [string]$DeployPath,
            [string]$BackupPath
        )
        # 创建备份
        if (Test-Path "$DeployPath\current") {
            Copy-Item "$DeployPath\current" $BackupPath -Recurse
            Write-Host "备份已创建: $BackupPath"
        }
        # 解压新版本
        if (Test-Path "$DeployPath\deploy-package.tar.gz") {
            # 解压 tar.gz 到 temp 目录
            if (!(Test-Path "$DeployPath\temp")) { New-Item -ItemType Directory -Path "$DeployPath\temp" | Out-Null }
            tar -xzf "$DeployPath\deploy-package.tar.gz" -C "$DeployPath\temp"
            if (Test-Path "$DeployPath\current") {
                Remove-Item "$DeployPath\current" -Recurse -Force
            }
            Move-Item "$DeployPath\temp\deploy-package" "$DeployPath\current"
            Remove-Item "$DeployPath\temp" -Recurse -Force
            Write-Host "新版本已部署到: $DeployPath\current"
        } else {
            Write-Host "错误: 部署包不存在"
            exit 1
        }
        # 清理旧备份（保留最近5个）
        Get-ChildItem "$DeployPath\backup-*" | Sort-Object CreationTime -Descending | Select-Object -Skip 5 | Remove-Item -Recurse -Force
        Write-Host "旧备份已清理"
        Write-Host "部署完成: $(Get-Date)"
        POWERSHELL_EOF
        # 传输部署脚本到服务器
        echo "$SERVER_PASSWORD" | sshpass -p "$SERVER_PASSWORD" \
        scp -P $SERVER_PORT -o StrictHostKeyChecking=no deploy-script.ps1 $SERVER_USER@$SERVER_HOST:$DEPLOY_PATH/
        # 远程执行 PowerShell 部署脚本
        echo "$SERVER_PASSWORD" | sshpass -p "$SERVER_PASSWORD" \
        ssh -o StrictHostKeyChecking=no -p $SERVER_PORT $SERVER_USER@$SERVER_HOST \
        "powershell -NoProfile -ExecutionPolicy Bypass -File '$DEPLOY_PATH\\deploy-script.ps1' -DeployPath '$DEPLOY_PATH' -BackupPath '$DEPLOY_PATH\\backup-$(powershell -Command \"Get-Date -Format yyyyMMdd-HHmmss\")'"
        
    - name: 发送部署通知
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ 部署成功！"
          echo "部署时间: $(date)"
          echo "提交哈希: ${{ github.sha }}"
          echo "分支: ${{ github.ref_name }}"
          echo "提交者: ${{ github.actor }}"
        else
          echo "❌ 部署失败！"
          echo "请检查部署日志"
        fi 